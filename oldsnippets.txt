function snapshotGPU() {
            var dataURL = renderer.domElement.toDataURL();
            var img = new Image();
            img.onload = function () {
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                console.log("image width and heigth")
                console.log(img.width);
                console.log(img.height);
                //document.body.appendChild(canvas);
                var context = canvas.getContext('2d');
                context.drawImage(img, 0, 0);
                var data = context.getImageData(0, 0, img.width, img.height).data;

                //To limit aliasing you can use meshlab laplacian smooth surface preserve with deg ~200 for 1 to 3 iterations
                //Alternatively we cand remove aliasing totally by exporting position.x and position.y with pixel shader using 2 additional renders, after scaling them to [0 , 1] range

                //console.log(data);
                //var zmap = new Array();
                //console.log(data.length);

                var zmin = 300.0;
                var zmax = 0.0;
                for (var i = 0; i < data.length; i += 4) {
                    var z = data[i] + data[i + 1] / 127. + data[i + 2] / 16383.;
                    if (z > 0.0) {
                        if (z > zmax) {
                            zmax = z;
                        }
                        if (z < zmin) {
                            zmin = z;
                        }
                    }
                }

                console.log("obj zmax : " + zmax);
                console.log("obj zmin : " + zmin);

                //zmin = document.getElementById("sliderMin").valueAsNumber;
                var stockx = document.getElementById("stockX").valueAsNumber;
                var stocky = document.getElementById("stockY").valueAsNumber;
                var stockz = document.getElementById("stockZ").valueAsNumber;
                //zmax = document.getElementById("sliderMax").value;
                console.log("zmax : " + zmax);
                console.log("zmin : " + zmin);

                var zfield = new Array(img.width * img.height);

                var field = generateXYFields(img.width, img.height);

                var co = 0;
                for (var i = 0; i < data.length; i += 4) {
                    var z = data[i] + data[i + 1] / 127. + data[i + 2] / 16383.;
                    if (z > 0.0) {
                        zfield[co] = stockz * clamp((zmax - z) / (zmax - zmin), 0.0, 1.0);
                    }
                    else {
                        zfield[co] = 0.0;
                    }
                    co++;
                }



                var xmin = img.width;
                var xmax = 0;
                var ymin = img.height;
                var ymax = 0;
                co = 0;
                for (var i = 0; i < img.height; i++) {
                    for (var j = 0; j < img.width; j++) {
                        if (zfield[co] > 0.0) {
                            if (j < xmin)
                                xmin = j;
                            if (j > xmax)
                                xmax = j;
                            if (i < ymin)
                                ymin = i;
                            if (i > ymax)
                                ymax = i;
                        }
                        co++;
                    }
                }

                field.z = zfield;
                console.log("xmin : " + xmin);
                console.log("xmax : " + xmax);
                console.log("ymin : " + ymin);
                console.log("ymax : " + ymax);

                console.log(zfield);

                field = raster(mesh, img.width, img.height, { sx: stockx, sy: stocky });

                //geometry.normalize();
                var geometry = fieldToGeometry({ data: field, width: img.width, height: img.height }, { x: stockx, y: stocky });

                var mymesh = new THREE.Mesh(geometry, outmat);
                /*
                mymesh.geometry.scale(-1.0, 1, 1);
                var tmp;
                for (var f = 0; f < mymesh.geometry.faces.length; f++) {
                    tmp = mymesh.geometry.faces[f].clone();
                    mymesh.geometry.faces[f].a = tmp.c;
                    mymesh.geometry.faces[f].c = tmp.a;
                }
                mymesh.geometry.verticesNeedUpdate = true;
                mymesh.geometry.normalsNeedUpdate = true;
                mymesh.geometry.computeBoundingSphere();
                mymesh.geometry.computeFaceNormals();
                mymesh.geometry.computeVertexNormals();
                */
                removeAllMesh(outputScene);
                mymesh.rotateZ(Math.PI);
                //scene.add(mesh);
                outmesh = mymesh

                outputScene.add(outmesh);
                console.log("done");



            };

            img.src = dataURL;


            //
            //document.body.appendChild(img);

        }











function proj(v, z) {
            return new CSG.Vector(v.x, v.y, z);
        }

        //True = clock-wise 
        //False = counter clockwise
        function trgori(p1, p2, p3) {
            var x1 = p1.x;
            var y1 = p1.y;
            var x2 = p2.x;
            var y2 = p2.y;
            var x3 = p3.x;
            var y3 = p3.y;

            return (y2 - y1) * (x3 - x2) - (y3 - y2) * (x2 - x1) > 0;

        }

        function crossproduct(x, y) {
            var out = x.clone().cross(y);
            return out;
        }

        function normalvec(a, b, c) {
            //var dir = Vector3.Cross(b - a, c - a);
            //var norm = Vector3.Normalize(dir);
            //return norm;
            var dir = crossproduct(b.clone().sub(a), c.clone().sub(a));
            //console.log("dir");
            //console.log(dir);
            return dir.normalize();
        }


        function faceZPrism(verts, face, vs, vps) {
            /*
            var a = new CSG.Vector(verts[face.a].x, verts[face.a].y, verts[face.a].z);
            var b = new CSG.Vector(verts[face.b].x, verts[face.b].y, verts[face.b].z);
            var c = new CSG.Vector(verts[face.c].x, verts[face.c].y, verts[face.c].z);
            */

            //var orient = trgori(a, b, c);

            var norm = normalvec(verts[face.a], verts[face.b], verts[face.c]);
            var normal = new CSG.Vector(norm.x, norm.y, norm.z);
            // Math.abs(norm.z) <0.05 ||
            if (Math.abs(norm.z) < 0.05 || norm.z < 0) {
                return CSG.fromPolygons([]);
            }
            /*
            var tb = b;
                b = c;
                c = tb;
                */
            /*
            if (orient == false) {
                var tb = b;
                b = c;
                c = tb;
            }*/

            //var ff = [a, b, c, proj(a, zmin), proj(b, zmin), proj(c, zmin)];
            //var v = ff.map( x=> new CSG.Vertex( x, normal ) );
            var v = [vs[face.a], vs[face.c], vs[face.b], vps[face.a], vps[face.c], vps[face.b]];

            var fl = [[0, 2, 1], [0, 1, 4, 3], [1, 2, 5, 4], [2, 0, 3, 5], [3, 4, 5]];


            var pols = fl.map(
                function (f) {
                    return new CSG.Polygon(f.map(function (i) { return v[i]; }));
                });

            return CSG.fromPolygons(pols);
        }


        function myunion(obj1, obj2) {
            if (obj2.polygons.length == 0) {
                return obj1;
            }
            if (obj1.polygons.length == 0) {
                return obj2;
            }

            var a = new CSG.Node(obj1.clone().polygons);
            var b = new CSG.Node(obj2.clone().polygons);
            a.clipTo(b);
            b.clipTo(a);
            if (a.plane == null || b.plane == null) {
                console.log("erreur a.plane == null || b.plane == null")
                console.log(obj1);
                console.log(obj2);
            }

            b.invert();
            b.clipTo(a);
            b.invert();
            a.build(b.allPolygons());
            return CSG.fromPolygons(a.allPolygons());
        };

        function unionMerge(tab) {
            if (tab.length == 1)
                return tab[0];

            var a = unionMerge(tab.slice(0, tab.length / 2));
            var b = unionMerge(tab.slice(tab.length / 2));

            //return a.union(b);
            return myunion(a, b);
            /*
            if( a.plane == null)
            {
                return b;
            }
            if( b.plane == null)
            {
                return a;
            }*/
        }


        /*
        var vp = [ {x:0,y:50,z:0}, {x:40,y:0,z:0},{x:0,y:0,z:0}];
        var f = {a:0,b:1,c:2};
        var u = faceZPrism(vp,f,-10);
        var cube = THREE.CSG.toMesh(u, outmat);
        */
        /*
        function project(vertices, faces, zmin) {
            var csgs = [];
            var n = new CSG.Vector(0, 0, 0);
            var vs = vertices.map(v => new CSG.Vertex(new CSG.Vector(v.x, v.y, v.z), n));
            var vps = vertices.map(v => new CSG.Vertex(new CSG.Vector(v.x, v.y, Math.min(v.z - 1, zmin)), n));
            for (var i = 0; i < faces.length; i++) {
                csgs.push(faceZPrism(vertices, faces[i], vs, vps));
            }

            var u = unionMerge(csgs);

            var outmesh = THREE.CSG.toMesh(u, outmat);
            return outmesh;
        }

        var cube = project(geometry.vertices, geometry.faces, -30.0);

        function csgrelief() {
            if (mesh == null) return;
            var geometry = new THREE.Geometry();
            geometry.fromBufferGeometry(mesh.geometry);
            var verts = geometry.vertices;

            for (var i = 0; i < verts.length; i++) {
                var vector = new THREE.Vector3(verts[i].x, verts[i].y, verts[i].z);
                vector.applyMatrix4(mesh.matrixWorld);
                verts[i] = vector;
            }
            outmesh = project(verts, geometry.faces, -100.0);
            outunif.stockz.value = document.getElementById("stockZ").valueAsNumber;
            removeAllMesh(outputScene);
            outputScene.add(outmesh);
        }
        */

        //console.log(union);
        //var csgCube = CSG.sphere({ radius: 40 });
        /*
        var pgeom = new THREE.Geometry();
        for( var i= 0 ;i < vp.length ; i++)
        {
            pgeom.vertices.push(new THREE.Vector3(vp[i].x,vp[i].y,vp[i].z));
        }

        for( var i= 0 ;i < vp.length ; i++)
        {
            pgeom.vertices.push(new THREE.Vector3(vp[i].x,vp[i].y,-10.0));
        }
        console.log(pgeom.vertices);

        pgeom.faces.push( new THREE.Face3(0,2,1) );
        //pgeom.faces.push( new THREE.Face4([0,1,4,3])
        pgeom.faces.push( new THREE.Face3(0,1,3) );
        pgeom.faces.push( new THREE.Face3(1,4,3) );
        //pgeom.faces.push( new THREE.Face4(1,2,5,4) );
        pgeom.faces.push( new THREE.Face3(1,2,4) );
        pgeom.faces.push( new THREE.Face3(2,5,4) );
        //pgeom.faces.push( new THREE.Face4(2,0,3,5) );
        pgeom.faces.push( new THREE.Face3(2,0,5) );
        pgeom.faces.push( new THREE.Face3(0,3,5) );

        pgeom.faces.push( new THREE.Face3(3,4,5) );

        
        //var cube = THREE.CSG.toMesh(u, outmat);

        var csgcube =  THREE.CSG.fromGeometry(pgeom);

        var cube = THREE.CSG.toMesh(csgcube, outmat);
        */

        //var cube = new THREE.Mesh(pgeom, outmat);


        function csgFromGeom(geometry) {
            var verts = geometry.vertices;
            var faces = geometry.faces;
            //console.log("verts");
            //console.log(verts);
            //console.log("faces");
            //console.log(faces);
            var n = new CSG.Vector(0, 0, 0);
            var v = verts.map(i => new CSG.Vertex(new CSG.Vector(i.x, i.y, i.z), n));
            //console.log("v");
            //console.log(v);
            var pols = faces.map(f => new CSG.Polygon([v[f.a], v[f.b], v[f.c]]));
            //var pols = [ new CSG.Polygon( [v[0],v[1],v[2]] ) ];
            //console.log("pols : ");
            //console.log(pols);
            var mycsg = CSG.fromPolygons(new CSG.Node(pols).allPolygons());

            return mycsg;
        }



<script id="vertexShader" type="x-shader/x-vertex">
        uniform vec2 resolution;
        void main()	{
            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);
            gl_Position = projectionMatrix * modelViewPosition; 
        }
        </script>

    <script id="fragmentShader" type="x-shader/x-fragment">
        uniform vec2 resolution;
        uniform float near;
        uniform float far;
        //Copied from the web : 
        vec4 EncodeFloatRGBA( float v ) {
        float remainder = v;
        vec4 res, r;
    
        res[0] = floor(remainder * 127.0) / 127.0;
        remainder -= res[0];
        res[1] = floor(remainder * 16383.0) / 16383.0;
        remainder -= res[1];
        res[2] = floor(remainder * 2097151.0) / 2097151.0;
    
        r[0] = clamp(floor((v) * 127.0),0.,127.);
        r[1] = clamp(floor((v - res[0]) * 16383.0),0.,127.);
        r[2] = clamp(floor((v - res[0] - res[1]) * 2097151.0),0.,127.);
    
        r.r = r[0] / 127.0;
        r.g = r[1] / 127.0;
        r.b = r[2] / 127.0;
        r.a = 1.;
        return r;
        }

        void main()	{
            // (gl_FragCoord.z-near)/(far-near) 
            gl_FragColor = EncodeFloatRGBA(gl_FragCoord.z);
        }
</script>

        function changemat() {
            var checked = false;//|| document.getElementById("materialDepth").checked
            if (checked == false) {
                changeSelected();
                return;
            }
            for (let i = 0; i < scene.children.length; i++) {
                if (scene.children[i].type === "Mesh") {
                    if (checked) {
                        scene.children[i].material = material;
                    }
                    else {
                        scene.children[i].material = materialNormal;
                    }
                }

            }

        }